spp$Bin_starts[i]=(spp$Bin_starts[i]+1)
}}
return(spp)
}
sp.range<-function(x,length){ #x=frame.eh$EXOME[1,]
ex_range<-function(x,n){
y<-vector()
for(i in 1:length(x)){
y[i]<-as.numeric(unlist(strsplit(as.character(x[i]),"-")))[n]}
return(y)
}
ex_width<-function(x){
y=s=b=vector()
for(i in 1:length(x)){
s[i]<-as.numeric(unlist(strsplit(as.character(x[i]),"-")))[1]
b[i]<-as.numeric(unlist(strsplit(as.character(x[i]),"-")))[2]
y[i]<-1+b[i]-s[i]
}
return(y)
}
e<-GenomicRanges::GRanges(seqnames=x$seqnames,
ranges = IRanges::IRanges(start = ex_range(x$range,1),
end = ex_range(x$range,2)),
strand = x$strand)
a<-BSgenome::start(e)
b<-BSgenome::end(e)
L=ex_width(x$range)
N = ceiling(L/length)
Coordinates = round(seq(from=a,to=b,length.out=N+1))
sd<-data.frame(Bin_starts = Coordinates[1:N],
Bin_ends = Coordinates[2:(N+1)])
return(sd)
}
spp<-spp.minus(sp.range(e,length))
c<-IRanges::IRanges(spp$Bin_starts,spp$Bin_ends)
GenomicRanges::mcols(c)$names<-paste0("Exome_c",1:nrow(spp))
return(c)}
#
x<-IRanges::IRangesList()
for (i in 1:nrow(EXOME)){ #
x[[i]]<-Irange(EXOME[i,],length)}
return(x)
}
exome.cut<-Exome.split(EXOME,cut.length)
rowc<-sapply(exome.cut,length)
gr.exome <-GenomicRanges::GRanges(seqnames= rep(EXOME$seqnames,rowc),
ranges = IRanges::IRanges(start = BSgenome::start(unlist(exome.cut)),
end =BSgenome::end(unlist(exome.cut))),
strand = rep(EXOME$strand,rowc))
fix_resize<-function(gr.hotspot,n){
TF<-vector()
for(i in 1:length(gr.hotspot)){
TF[i]<-ifelse(as.character(gr.hotspot@strand)[i]=="+","start","end")}
y<-GenomicRanges::resize(gr.hotspot, n,fix=TF)
return(y)
} #shift the range
ex.gr.ex<-fix_resize(gr.exome,n)
extension_seq <- BSgenome::getSeq(chromosome, ex.gr.ex)
cut_sequence<-BSgenome::getSeq(chromosome, gr.exome)
ex.n<-split(1:length(extension_seq), rep(1:length(rowc), rowc))
extend<- GenomicRanges::GRanges(seqnames= rep(EXOME$seqnames,rowc),
ranges =IRanges:: IRanges(start = BSgenome::end(gr.exome),
end = BSgenome::end(ex.gr.ex)), strand = rep(x$strand,rowc))
extend<- GenomicRanges::GRanges(seqnames= rep(EXOME$seqnames,rowc),
ranges =IRanges:: IRanges(start = BSgenome::end(gr.exome),
end = BSgenome::end(ex.gr.ex)), strand = rep(x$strand,rowc))
rep(EXOME$seqnames,rowc)
strand = rep(x$strand,rowc)
x$strand
rowc
ep(x$strand,rowc)
rep(x$strand,rowc)
rep("+",c(1,1,1,1))
extend<- GenomicRanges::GRanges(seqnames= rep(EXOME$seqnames,rowc),
ranges =IRanges:: IRanges(start = BSgenome::end(gr.exome),
end = BSgenome::end(ex.gr.ex)), strand = rep(as.character(x$strand),rowc))
as.character(x$strand)
rep(as.character(x$strand),rowc)
x$strand
EXOME$strand
extend<- GenomicRanges::GRanges(seqnames= rep(EXOME$seqnames,rowc),
ranges =IRanges:: IRanges(start = BSgenome::end(gr.exome),
end = BSgenome::end(ex.gr.ex)), strand = rep(as.character(EXOME$strand),rowc))
Extend.Seq<-BSgenome::getSeq(chromosome, extend)
extension=exten_start=exten_end=cut_width=cut_seq=ExSeq=list()
Exo_extension<-function(EXOME,n,cut.length,chromosome){ #x=frame.eh$EXOME, n is length of extension;length is cut length
#range for real location, x=frame.eh$EXOME[i,]
Exome.split<-function(EXOME,length){
Irange<-function(e,length){
spp.minus<-function(spp){
if(nrow(spp)==1){spp=spp}else{
for (i in 2: nrow(spp)){
spp$Bin_starts[i]=(spp$Bin_starts[i]+1)
}}
return(spp)
}
sp.range<-function(x,length){ #x=frame.eh$EXOME[1,]
ex_range<-function(x,n){
y<-vector()
for(i in 1:length(x)){
y[i]<-as.numeric(unlist(strsplit(as.character(x[i]),"-")))[n]}
return(y)
}
ex_width<-function(x){
y=s=b=vector()
for(i in 1:length(x)){
s[i]<-as.numeric(unlist(strsplit(as.character(x[i]),"-")))[1]
b[i]<-as.numeric(unlist(strsplit(as.character(x[i]),"-")))[2]
y[i]<-1+b[i]-s[i]
}
return(y)
}
e<-GenomicRanges::GRanges(seqnames=x$seqnames,
ranges = IRanges::IRanges(start = ex_range(x$range,1),
end = ex_range(x$range,2)),
strand = x$strand)
a<-BSgenome::start(e)
b<-BSgenome::end(e)
L=ex_width(x$range)
N = ceiling(L/length)
Coordinates = round(seq(from=a,to=b,length.out=N+1))
sd<-data.frame(Bin_starts = Coordinates[1:N],
Bin_ends = Coordinates[2:(N+1)])
return(sd)
}
spp<-spp.minus(sp.range(e,length))
c<-IRanges::IRanges(spp$Bin_starts,spp$Bin_ends)
GenomicRanges::mcols(c)$names<-paste0("Exome_c",1:nrow(spp))
return(c)}
#
x<-IRanges::IRangesList()
for (i in 1:nrow(EXOME)){ #
x[[i]]<-Irange(EXOME[i,],length)}
return(x)
}   #EXOME=frame.eh$EXOME;length=100
exome.cut<-Exome.split(EXOME,cut.length)
rowc<-sapply(exome.cut,length)
gr.exome <-GenomicRanges::GRanges(seqnames= rep(EXOME$seqnames,rowc),
ranges = IRanges::IRanges(start = BSgenome::start(unlist(exome.cut)),
end =BSgenome::end(unlist(exome.cut))),
strand = rep(EXOME$strand,rowc))
fix_resize<-function(gr.hotspot,n){
TF<-vector()
for(i in 1:length(gr.hotspot)){
TF[i]<-ifelse(as.character(gr.hotspot@strand)[i]=="+","start","end")}
y<-GenomicRanges::resize(gr.hotspot, n,fix=TF)
return(y)
} #shift the range
ex.gr.ex<-fix_resize(gr.exome,n)
extension_seq <- BSgenome::getSeq(chromosome, ex.gr.ex)
cut_sequence<-BSgenome::getSeq(chromosome, gr.exome)
ex.n<-split(1:length(extension_seq), rep(1:length(rowc), rowc))
extend<- GenomicRanges::GRanges(seqnames= rep(EXOME$seqnames,rowc),
ranges =IRanges:: IRanges(start = BSgenome::end(gr.exome),
end = BSgenome::end(ex.gr.ex)), strand = rep(as.character(EXOME$strand),rowc))
Extend.Seq<-BSgenome::getSeq(chromosome, extend)
extension=exten_start=exten_end=cut_width=cut_seq=ExSeq=list()
for(i in 1: nrow(EXOME)){
extension[[i]]<-extension_seq[ex.n[[i]]]
exten_start[[i]]<-BSgenome::start(ex.gr.ex[ex.n[[i]]])
exten_end[[i]]<-BSgenome::end(ex.gr.ex[ex.n[[i]]])
cut_width[[i]]<-BSgenome::width(gr.exome[ex.n[[i]]])
cut_seq[[i]]<-cut_sequence[ex.n[[i]]]
ExSeq[[i]]<-Extend.Seq[ex.n[[i]]]
}
EXOME$Extend.seq<-lapply(extension,as.character)
EXOME$Extend.start<- exten_start
EXOME$Extend.end<-exten_end
EXOME$Fragment.width<-cut_width
EXOME$Fragment.seq<-lapply(cut_seq,as.character)
EXOME$Extend.Fragment<-lapply(ExSeq,as.character)
return(EXOME)}
Exo_extension(exo,280,200,chromosome)
entend.exome<-Exo_extension(exo,280,200,chromosome)
Exo_output(fil.exo, entend.exome$Extend.seq,Write.out=FALSE)
exo.ex<-entend.exome$Extend.seq
fil.result<-use.fil(fil.exo,exo.ex)
use.fil<-function(Result,cut){Result[which(sapply(Result,length)==sapply(cut,length))]}
fil.result<-use.fil(fil.exo,exo.ex)
x<-lapply(fil.result,Ex_first)
Ex_first<-function(x){
lis<-list()
na<-data.frame(GSP1=NA,GSP2=NA,GSP1.Seq=NA,GSP1.Start=NA,
GSP1.End=NA, GSP1.Length=NA,GSP1.TM=NA,GSP2.Seq=NA,GSP2.Startt=NA,
GSP2.End=NA,GSP2.Length=NA,GSP2.TM=NA)
cna<-data.frame(GSP1="None of them fit",GSP2=NA,GSP1.Seq=NA,GSP1.Start=NA,
GSP1.End=NA, GSP1.Length=NA,GSP1.TM=NA,GSP2.Seq=NA,GSP2.Startt=NA,
GSP2.End=NA,GSP2.Length=NA,GSP2.TM=NA)
for(i in 1:length(x)){
lis[[i]]<-if(class(x[[i]])!="data.frame"){cna}else{
if(ncol(x[[i]])==1){na}else{
as.data.frame(x[[i]][1,])}}}
y<-rlist::list.rbind(lis)
return(y)
}
y
Exo_output<-function(fil.exo,exo.ex,NAME,Write.out=TRUE){
Ex_first<-function(x){
lis<-list()
na<-data.frame(GSP1=NA,GSP2=NA,GSP1.Seq=NA,GSP1.Start=NA,
GSP1.End=NA, GSP1.Length=NA,GSP1.TM=NA,GSP2.Seq=NA,GSP2.Start=NA,
GSP2.End=NA,GSP2.Length=NA,GSP2.TM=NA)
cna<-data.frame(GSP1="None of them fit",GSP2=NA,GSP1.Seq=NA,GSP1.Start=NA,
GSP1.End=NA, GSP1.Length=NA,GSP1.TM=NA,GSP2.Seq=NA,GSP2.Start=NA,
GSP2.End=NA,GSP2.Length=NA,GSP2.TM=NA)
for(i in 1:length(x)){
lis[[i]]<-if(class(x[[i]])!="data.frame"){cna}else{
if(ncol(x[[i]])==1){na}else{
as.data.frame(x[[i]][1,])}}}
y<-rlist::list.rbind(lis)
return(y)
}
use.fil<-function(Result,cut){Result[which(sapply(Result,length)==sapply(cut,length))]}
fil.result<-use.fil(fil.exo,exo.ex)
x<-lapply(fil.result,Ex_first)
y<-rlist::list.rbind(x) %>% as.data.frame()
NO<-data.frame(NO.=rownames(y))
res<-cbind(NO,y)
rownames(res)<-NULL
if(Write.out==TRUE){write.csv(res,paste0(NAME,".csv"),row.names = FALSE)} else{return(res)}
}
Exo_output(fil.exo, entend.exome$Extend.seq,Write.out=FALSE)
Exo_output<-function(fil.exo,exo.ex,NAME,Write.out=TRUE){
Ex_first<-function(x){
lis<-list()
na<-data.frame(GSP1=NA,GSP2=NA,GSP1.Seq=NA,GSP1.Start=NA,
GSP1.End=NA, GSP1.Length=NA,GSP1.TM=NA,GSP2.Seq=NA,GSP2.Start=NA,
GSP2.End=NA,GSP2.Length=NA,GSP2.TM=NA)
cna<-data.frame(GSP1="None of them fit",GSP2=NA,GSP1.Seq=NA,GSP1.Start=NA,
GSP1.End=NA, GSP1.Length=NA,GSP1.TM=NA,GSP2.Seq=NA,GSP2.Start=NA,
GSP2.End=NA,GSP2.Length=NA,GSP2.TM=NA)
for(i in 1:length(x)){
lis[[i]]<-if(class(x[[i]])!="data.frame"){cna}else{
if(ncol(x[[i]])==1){na}else{
as.data.frame(x[[i]][1,])}}}
y<-rlist::list.rbind(lis)
return(y)
}
use.fil<-function(Result,cut){Result[which(sapply(Result,length)==sapply(cut,length))]}
fil.result<-use.fil(fil.exo,exo.ex)
x<-lapply(fil.result,Ex_first)
y<- as.data.frame(rlist::list.rbind(x))
NO<-data.frame(NO.=rownames(y))
res<-cbind(NO,y)
rownames(res)<-NULL
if(Write.out==TRUE){write.csv(res,paste0(NAME,".csv"),row.names = FALSE)} else{return(res)}
}
Exo_output(fil.exo, entend.exome$Extend.seq,Write.out=FALSE)
y<-Exo_output(fil.exo, entend.exome$Extend.seq,Write.out=FALSE)
View(y)
Exo_output(fil.exo, entend.exome$Extend.seq,"exoResult")
Chr<-"chr5"
Target.Start<-176939369
Target.End<-176939371
Extend.length<-185
ID<-"leukemia_36"
plist<-List_primer3Output(hot.out) %>% List_PrimerSet()
plist<- List_PrimerSet(hot.out)
library(Primer3R)
x<-Hot_output(rem_Pairs.inf,Write.out=FALSE)[3,]
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x,plot=TRUE)
gr <- GenomicRanges::GRanges(Chr,
ranges = IRanges(
start = Target.Start,
end = ((Target.End+Extend.length)-1)),ID=ID)
gsp1.s<-(as.numeric(x$GSP1.End)+Target.Start-1)
gsp2.s<-(as.numeric(x$GSP2.End)+Target.Start-1)
pr <- GenomicRanges::GRanges(rep(Chr,3),
ranges = IRanges(
start = c(Target.Start,gsp1.s,gsp2.s),
end = c(Target.End,(as.numeric(x$GSP1.Length)+gsp1.s-1),c(gsp2.s+ as.numeric(x$GSP2.Length)-1))),ID=c(ID,"GSP1","GSP2"))
ensGeneTrack <- TnT::FeatureTrack(pr, tooltip = as.data.frame(pr),
names = c(ID,"GSP1","GSP2"),
color = TnT::mapcol(c(ID,"GSP1","GSP2"), palette.fun = grDevices::rainbow))
TnTGenome(ensGeneTrack, view.range = gr)
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome<-function(Chr,Target.Start,Target.End,Extend.length,ID,x,plot=TRUE){
gr <- GenomicRanges::GRanges(Chr,
ranges = IRanges(
start = Target.Start,
end = ((Target.End+Extend.length)-1)),ID=ID)
gsp1.s<-(as.numeric(x$GSP1.End)+Target.Start-1)
gsp2.s<-(as.numeric(x$GSP2.End)+Target.Start-1)
pr <- GenomicRanges::GRanges(rep(Chr,3),
ranges = IRanges(
start = c(Target.Start,gsp1.s,gsp2.s),
end = c(Target.End,(as.numeric(x$GSP1.Length)+gsp1.s-1),c(gsp2.s+ as.numeric(x$GSP2.Length)-1))),ID=c(ID,"GSP1","GSP2"))
ensGeneTrack <- TnT::FeatureTrack(pr, tooltip = as.data.frame(pr),
names = c(ID,"GSP1","GSP2"),
color = TnT::mapcol(c(ID,"GSP1","GSP2"), palette.fun = grDevices::rainbow))
if(plot==TRUE){
TnT::TnTGenome(ensGeneTrack, view.range = gr)
return(pr)}else{return(pr)}
}
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
if(1>0){TnT::TnTGenome(ensGeneTrack, view.range = gr)}else{NULL}
#' Chr<-"chr5"
#' Target.Start<-176939369
#' Target.End<-176939371
#' Extend.length<-185
#' ID<-"leukemia_36"
#' plist<- List_PrimerSet(hot.out)
#' hot.pair<-List_PairSet(plist)
#' rem_Pairs.inf<-Filter_Inf(hot.pair,plist,distance=20,overlap=10)
#' x<-Hot_output(rem_Pairs.inf,Write.out=FALSE)[3,]
#' visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome<-function(Chr,Target.Start,Target.End,Extend.length,ID,x,plot=TRUE){
gr <- GenomicRanges::GRanges(Chr,
ranges = IRanges(
start = Target.Start,
end = ((Target.End+Extend.length)-1)),ID=ID)
gsp1.s<-(as.numeric(x$GSP1.End)+Target.Start-1)
gsp2.s<-(as.numeric(x$GSP2.End)+Target.Start-1)
pr <- GenomicRanges::GRanges(rep(Chr,3),
ranges = IRanges(
start = c(Target.Start,gsp1.s,gsp2.s),
end = c(Target.End,(as.numeric(x$GSP1.Length)+gsp1.s-1),c(gsp2.s+ as.numeric(x$GSP2.Length)-1))),ID=c(ID,"GSP1","GSP2"))
ensGeneTrack <- TnT::FeatureTrack(pr, tooltip = as.data.frame(pr),
names = c(ID,"GSP1","GSP2"),
color = TnT::mapcol(c(ID,"GSP1","GSP2"), palette.fun = grDevices::rainbow))
if(plot==TRUE){
TnT::TnTGenome(ensGeneTrack, view.range = gr)
return(pr)}else{return(pr)
TnT::TnTGenome(ensGeneTrack, view.range = gr)}
}
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
#' Chr<-"chr5"
#' Target.Start<-176939369
#' Target.End<-176939371
#' Extend.length<-185
#' ID<-"leukemia_36"
#' plist<- List_PrimerSet(hot.out)
#' hot.pair<-List_PairSet(plist)
#' rem_Pairs.inf<-Filter_Inf(hot.pair,plist,distance=20,overlap=10)
#' x<-Hot_output(rem_Pairs.inf,Write.out=FALSE)[3,]
#' visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome<-function(Chr,Target.Start,Target.End,Extend.length,ID,x,plot=TRUE){
gr <- GenomicRanges::GRanges(Chr,
ranges = IRanges(
start = Target.Start,
end = ((Target.End+Extend.length)-1)),ID=ID)
gsp1.s<-(as.numeric(x$GSP1.End)+Target.Start-1)
gsp2.s<-(as.numeric(x$GSP2.End)+Target.Start-1)
pr <- GenomicRanges::GRanges(rep(Chr,3),
ranges = IRanges(
start = c(Target.Start,gsp1.s,gsp2.s),
end = c(Target.End,(as.numeric(x$GSP1.Length)+gsp1.s-1),c(gsp2.s+ as.numeric(x$GSP2.Length)-1))),ID=c(ID,"GSP1","GSP2"))
ensGeneTrack <- TnT::FeatureTrack(pr, tooltip = as.data.frame(pr),
names = c(ID,"GSP1","GSP2"),
color = TnT::mapcol(c(ID,"GSP1","GSP2"), palette.fun = grDevices::rainbow))
if(plot==TRUE){
TnT::TnTGenome(ensGeneTrack, view.range = gr)
return(pr)}else{return(pr)
TnT::TnTGenome(ensGeneTrack, view.range = gr)}
}
#' Chr<-"chr5"
#' Target.Start<-176939369
#' Target.End<-176939371
#' Extend.length<-185
#' ID<-"leukemia_36"
#' plist<- List_PrimerSet(hot.out)
#' hot.pair<-List_PairSet(plist)
#' rem_Pairs.inf<-Filter_Inf(hot.pair,plist,distance=20,overlap=10)
#' x<-Hot_output(rem_Pairs.inf,Write.out=FALSE)[3,]
#' visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome<-function(Chr,Target.Start,Target.End,Extend.length,ID,x,plot=TRUE){
gr <- GenomicRanges::GRanges(Chr,
ranges = IRanges(
start = Target.Start,
end = ((Target.End+Extend.length)-1)),ID=ID)
gsp1.s<-(as.numeric(x$GSP1.End)+Target.Start-1)
gsp2.s<-(as.numeric(x$GSP2.End)+Target.Start-1)
pr <- GenomicRanges::GRanges(rep(Chr,3),
ranges = IRanges(
start = c(Target.Start,gsp1.s,gsp2.s),
end = c(Target.End,(as.numeric(x$GSP1.Length)+gsp1.s-1),c(gsp2.s+ as.numeric(x$GSP2.Length)-1))),ID=c(ID,"GSP1","GSP2"))
ensGeneTrack <- TnT::FeatureTrack(pr, tooltip = as.data.frame(pr),
names = c(ID,"GSP1","GSP2"),
color = TnT::mapcol(c(ID,"GSP1","GSP2"), palette.fun = grDevices::rainbow))
TnT::TnTGenome(ensGeneTrack, view.range = gr)
}
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
#' Chr<-"chr5"
#' Target.Start<-176939369
#' Target.End<-176939371
#' Extend.length<-185
#' ID<-"leukemia_36"
#' plist<- List_PrimerSet(hot.out)
#' hot.pair<-List_PairSet(plist)
#' rem_Pairs.inf<-Filter_Inf(hot.pair,plist,distance=20,overlap=10)
#' x<-Hot_output(rem_Pairs.inf,Write.out=FALSE)[3,]
#' visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome<-function(Chr,Target.Start,Target.End,Extend.length,ID,x,plot=TRUE){
gr <- GenomicRanges::GRanges(Chr,
ranges = IRanges(
start = Target.Start,
end = ((Target.End+Extend.length)-1)),ID=ID)
gsp1.s<-(as.numeric(x$GSP1.End)+Target.Start-1)
gsp2.s<-(as.numeric(x$GSP2.End)+Target.Start-1)
pr <- GenomicRanges::GRanges(rep(Chr,3),
ranges = IRanges(
start = c(Target.Start,gsp1.s,gsp2.s),
end = c(Target.End,(as.numeric(x$GSP1.Length)+gsp1.s-1),c(gsp2.s+ as.numeric(x$GSP2.Length)-1))),ID=c(ID,"GSP1","GSP2"))
ensGeneTrack <- TnT::FeatureTrack(pr, tooltip = as.data.frame(pr),
names = c(ID,"GSP1","GSP2"),
color = TnT::mapcol(c(ID,"GSP1","GSP2"), palette.fun = grDevices::rainbow))
if(plot!=TRUE){
TnT::TnTGenome(ensGeneTrack, view.range = gr)
return(pr)}else{return(pr)}
}
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
#' Chr<-"chr5"
#' Target.Start<-176939369
#' Target.End<-176939371
#' Extend.length<-185
#' ID<-"leukemia_36"
#' plist<- List_PrimerSet(hot.out)
#' hot.pair<-List_PairSet(plist)
#' rem_Pairs.inf<-Filter_Inf(hot.pair,plist,distance=20,overlap=10)
#' x<-Hot_output(rem_Pairs.inf,Write.out=FALSE)[3,]
#' visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome<-function(Chr,Target.Start,Target.End,Extend.length,ID,x,plot=TRUE){
gr <- GenomicRanges::GRanges(Chr,
ranges = IRanges(
start = Target.Start,
end = ((Target.End+Extend.length)-1)),ID=ID)
gsp1.s<-(as.numeric(x$GSP1.End)+Target.Start-1)
gsp2.s<-(as.numeric(x$GSP2.End)+Target.Start-1)
pr <- GenomicRanges::GRanges(rep(Chr,3),
ranges = IRanges(
start = c(Target.Start,gsp1.s,gsp2.s),
end = c(Target.End,(as.numeric(x$GSP1.Length)+gsp1.s-1),c(gsp2.s+ as.numeric(x$GSP2.Length)-1))),ID=c(ID,"GSP1","GSP2"))
ensGeneTrack <- TnT::FeatureTrack(pr, tooltip = as.data.frame(pr),
names = c(ID,"GSP1","GSP2"),
color = TnT::mapcol(c(ID,"GSP1","GSP2"), palette.fun = grDevices::rainbow))
if(plot!=TRUE){
TnT::TnTGenome(ensGeneTrack, view.range = gr)
return(pr)}else{return(pr)}
}
#' Chr<-"chr5"
#' Target.Start<-176939369
#' Target.End<-176939371
#' Extend.length<-185
#' ID<-"leukemia_36"
#' plist<- List_PrimerSet(hot.out)
#' hot.pair<-List_PairSet(plist)
#' rem_Pairs.inf<-Filter_Inf(hot.pair,plist,distance=20,overlap=10)
#' x<-Hot_output(rem_Pairs.inf,Write.out=FALSE)[3,]
#' visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome<-function(Chr,Target.Start,Target.End,Extend.length,ID,x){
gr <- GenomicRanges::GRanges(Chr,
ranges = IRanges(
start = Target.Start,
end = ((Target.End+Extend.length)-1)),ID=ID)
gsp1.s<-(as.numeric(x$GSP1.End)+Target.Start-1)
gsp2.s<-(as.numeric(x$GSP2.End)+Target.Start-1)
pr <- GenomicRanges::GRanges(rep(Chr,3),
ranges = IRanges(
start = c(Target.Start,gsp1.s,gsp2.s),
end = c(Target.End,(as.numeric(x$GSP1.Length)+gsp1.s-1),c(gsp2.s+ as.numeric(x$GSP2.Length)-1))),ID=c(ID,"GSP1","GSP2"))
ensGeneTrack <- TnT::FeatureTrack(pr, tooltip = as.data.frame(pr),
names = c(ID,"GSP1","GSP2"),
color = TnT::mapcol(c(ID,"GSP1","GSP2"), palette.fun = grDevices::rainbow))
TnT::TnTGenome(ensGeneTrack, view.range = gr)
return(pr)
}
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
#' Chr<-"chr5"
#' Target.Start<-176939369
#' Target.End<-176939371
#' Extend.length<-185
#' ID<-"leukemia_36"
#' plist<- List_PrimerSet(hot.out)
#' hot.pair<-List_PairSet(plist)
#' rem_Pairs.inf<-Filter_Inf(hot.pair,plist,distance=20,overlap=10)
#' x<-Hot_output(rem_Pairs.inf,Write.out=FALSE)[3,]
#' visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
visualGenome<-function(Chr,Target.Start,Target.End,Extend.length,ID,x,plot=TRUE){
gr <- GenomicRanges::GRanges(Chr,
ranges = IRanges(
start = Target.Start,
end = ((Target.End+Extend.length)-1)),ID=ID)
gsp1.s<-(as.numeric(x$GSP1.End)+Target.Start-1)
gsp2.s<-(as.numeric(x$GSP2.End)+Target.Start-1)
pr <- GenomicRanges::GRanges(rep(Chr,3),
ranges = IRanges(
start = c(Target.Start,gsp1.s,gsp2.s),
end = c(Target.End,(as.numeric(x$GSP1.Length)+gsp1.s-1),c(gsp2.s+ as.numeric(x$GSP2.Length)-1))),ID=c(ID,"GSP1","GSP2"))
ensGeneTrack <- TnT::FeatureTrack(pr, tooltip = as.data.frame(pr),
names = c(ID,"GSP1","GSP2"),
color = TnT::mapcol(c(ID,"GSP1","GSP2"), palette.fun = grDevices::rainbow))
if(plot!=TRUE){
TnT::TnTGenome(ensGeneTrack, view.range = gr)
pr}else{pr}
}
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
library(Primer3R)
?List_PrimerSet
library(Primer3R)
devtools::install_github("Spencer1996/Primer3R")
load("d:/Documents/a/.RData")
Hot_output(rem_Pairs.inf,Write.out=FALSE)
rem_Pairs.inf
library(Primer3R)
visualGenome(Chr,Target.Start,Target.End,Extend.length,ID,x)
